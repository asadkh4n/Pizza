---
swagger: "2.0"
info:
  description: "A simple pizza delivery API. Allows to create and modify the menu\
    \ (i.e. pizzas). You can place orders and query the order status."
  version: "1.0.0"
  title: "PizzaOrderService"
  contact:
    email: "de@ise.tu-berlin.de"
basePath: "/v1"
tags:
- name: "pizza"
  description: "Operations related to pizzas and the menu."
- name: "order"
  description: "Operations involving the creation and status of orders."
schemes:
- "http"
paths:
  /pizza:
    get:
      tags:
      - "pizza"
      summary: "Returns all pizzas (their ids) on the menu."
      description: ""
      operationId: "getPizzas"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
        404:
          description: "No pizzas exist"
      x-swagger-router-controller: "Pizza"
    post:
      tags:
      - "pizza"
      summary: "Add a new Pizza to the menu."
      description: ""
      operationId: "addPizza"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pizza that should be added to the menu"
        required: true
        schema:
          $ref: "#/definitions/Pizza"
      responses:
        201:
          description: "Created new pizza."
          headers:
            location:
              type: "string"
              format: "uri"
              description: "location (uri) of the created pizza"
        400:
          description: "Invalid input"
      x-swagger-router-controller: "Pizza"
  /pizza/{pizzaId}:
    get:
      tags:
      - "pizza"
      summary: "Get pizza by ID"
      description: "Returns a single Pizza"
      operationId: "getPizzaById"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "ID of pizzas"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "found pizza"
          schema:
            $ref: "#/definitions/Pizza"
        404:
          description: "Pizza could not be found"
      x-swagger-router-controller: "Pizza"
    put:
      tags:
      - "pizza"
      summary: "Update an existing pizza"
      description: ""
      operationId: "updatePizza"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pizza that should be modified"
        required: true
        schema:
          $ref: "#/definitions/Pizza"
      - name: "pizzaId"
        in: "path"
        description: "ID of pizzas"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Update okay"
        400:
          description: "Invalid pizza supplied"
        404:
          description: "Pizza not found"
      x-swagger-router-controller: "Pizza"
    delete:
      tags:
      - "pizza"
      summary: "Deletes a Pizza"
      description: ""
      operationId: "deletePizza"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "Id of pizza to delete."
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pizza not found"
      x-swagger-router-controller: "Pizza"
  /pizza/{pizzaId}/topping:
    get:
      tags:
      - "pizza"
      summary: "Get the list of toppings for this pizza."
      description: ""
      operationId: "listToppings"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "ID of pizza"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Found toppings for this pizza. Returned are ids."
          schema:
            type: "array"
            items:
              type: "integer"
        400:
          description: "No toppings found."
        404:
          description: "Specified pizza id not found."
      x-swagger-router-controller: "Pizza"
    post:
      tags:
      - "pizza"
      summary: "Creates a new topping."
      description: ""
      operationId: "createTopping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "ID of pizza to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Topping to be added to the pizza"
        required: true
        schema:
          $ref: "#/definitions/Topping"
      responses:
        201:
          description: "Created new Topping for pizza."
          headers:
            location:
              type: "string"
              format: "uri"
              description: "location (uri) of the created topping"
        400:
          description: "Invalid input"
        404:
          description: "No toppings found."
      x-swagger-router-controller: "Pizza"
  /pizza/{pizzaId}/topping/{toppingId}:
    get:
      tags:
      - "pizza"
      summary: "Find topping by ID"
      description: "Returns the topping with the given ID."
      operationId: "getToppingById"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "ID of the pizza."
        required: true
        type: "integer"
        format: "int64"
      - name: "toppingId"
        in: "path"
        description: "ID of the topping."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "found topping"
          schema:
            $ref: "#/definitions/Topping"
        400:
          description: "Invalid ID(s) supplied."
        404:
          description: "Pizza or Topping not found."
      x-swagger-router-controller: "Pizza"
    delete:
      tags:
      - "pizza"
      summary: "Delete topping by ID"
      description: "Deletes the topping with the given ID."
      operationId: "deleteToppingById"
      produces:
      - "application/json"
      parameters:
      - name: "pizzaId"
        in: "path"
        description: "ID of the pizza."
        required: true
        type: "integer"
        format: "int64"
      - name: "toppingId"
        in: "path"
        description: "ID of the topping."
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "deleted"
        400:
          description: "Invalid IDs."
        404:
          description: "Pizza or Topping not found."
      x-swagger-router-controller: "Pizza"
  /order:
    get:
      tags:
      - "order"
      summary: "Returns a list of orders."
      description: ""
      operationId: "getOrders"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "found orders. returned are ids."
          schema:
            type: "array"
            items:
              type: "integer"
        404:
          description: "No orders found."
      x-swagger-router-controller: "Order"
    post:
      tags:
      - "order"
      summary: "Place an order."
      description: ""
      operationId: "createOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order of pizzas"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        201:
          description: "Created new order successfully."
          headers:
            location:
              type: "string"
              format: "uri"
              description: "location (uri) of the created order"
        400:
          description: "Invalid Order"
      x-swagger-router-controller: "Order"
  /order/{orderId}:
    get:
      tags:
      - "order"
      summary: "Find purchase order by ID"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order to be returned"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-swagger-router-controller: "Order"
    delete:
      tags:
      - "order"
      summary: "Delete purchase order by ID"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Deletion successfull"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      x-swagger-router-controller: "Order"
definitions:
  Order:
    type: "object"
    required:
    - "orderItems"
    - "recipient"
    properties:
      id:
        type: "integer"
        format: "int64"
      orderItems:
        type: "array"
        items:
          $ref: "#/definitions/OrderItem"
      totalPrice:
        type: "number"
        format: "float64"
      recipient:
        type: "string"
        format: "email"
  OrderItem:
    type: "object"
    properties:
      pizzaId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
  Pizza:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      size:
        type: "string"
        description: "Size"
        enum:
        - "Standard"
        - "Large"
      price:
        type: "number"
        format: "float64"
        description: "Price including toppings."
  Topping:
    type: "object"
    required:
    - "name"
    - "price"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Onions"
      price:
        type: "number"
        format: "float64"
